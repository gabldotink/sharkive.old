#!/usr/bin/env bash
# sharkive [https://github.com/gabldotink/sharkive/]
# CC0 Public Domain [https://creativecommons.org/publicdomain/zero/1.0/]
#
# this is the *nix version, for Unix and Unix-like systems such as
# Linux; MacOS; Cygwin; Termux; BSD; or, like, Solaris or something.
# a Windows version is, as they say, “in the works.”
# you can still use Cygwin on Windows, though.
#
# sharkive is a bash script to download online content,
# and optionally upload it to the Internet Archive [https://archive.org].

# the following block should be POSIX shell compliant

# if return succeeds, this script is being sourced (this doesn't work yet)
#if { return 42 &> '/dev/null' || [ printf "$?" = 42 ]; }; then
#    printf '[error] it appears that this script is being sourced.
#please execute this script instead. exiting _2\n'
#fi

# check shell
if [ -n "$BASH_VERSION" ]; then
  if [ "$BASH_SOURCE" != "$0" ]; then
    printf '[error] it appears that this script is being sourced.
please execute this script instead. exiting\n'
    return 1
  fi
fi
#elif [ "$0" != 'bash' ]; then
#  printf '[error] it appears that this script is not being run with bash.
#please execute this script with bash instead. exiting\n'
#fi

# disable POSIX mode, plus some other stuff
set -h +Bo posix
unset POSIXLY_CORRECT

# end POSIX compliant block

# exit trap
exit_trap () {
  printf '[error] SIGINT received, ending\n'
  exit 1
}

trap 'exit_trap' INT

# invalid options message
opts_invalid () {
  printf 'invalid options given\n'
}

# short usage text
usage_short () {
  printf 'one of the options [-hm] must be used
use ‘sharkive -h’ for detailed help\n'
}

# usage text
usage () {
  printf '
usage: sharkive [-h] [-m method -s source] [-u]

you’re using sharkive; a bash script to download online content,
and optionally upload it to the Internet Archive.

options:
  -h  print this help message
  -m  define “method” for downloading
  -s  define download source (URI)
      (use multiple times for multiple sources)
  -u  upload to the Internet Archive
      once download is finished\n'
}

# unset variables that may not be re-set later
unset method
unset source
unset to_upload
unset to_exit
unset opts_present

# get options
while getopts ':hm:s:u' opt; do
  case "$opt" in
  h) # help
    usage
    exit 1
    ;;
  m) # download method
    declare -l method="$OPTARG"
    ;;
  s) # download source
    source="$OPTARG"
    ;;
  u) # upload
    to_upload='yep'
    ;;
  *) # invalid options
    opts_invalid
    usage_short
    exit 1
    ;;
  esac
  opts_present='yep'
done

# show short usage if no options are given (this is a very insightful comment)
if [[ "$opts_present" != 'yep' ]]; then
  usage_short
  exit 1
fi

# show user-declared options
show_options () {
  if [[ -n "$method" ]]; then
    printf '[info] using method %s\n' "$method"
  else
    printf '[error] no method defined\n'
    to_exit='yep'
  fi
  if [[ -n "$source" ]]; then
    printf '[info] using source %s\n' "$source"
  else
    printf '[error] no source defined\n'
    to_exit='yep'
  fi
  if [[ "$to_upload" == 'yep' ]]; then
    printf '[info] uploading to the Internet Archive when finished\n'
  fi
  if [[ "$to_exit" == 'yep' ]]; then
    printf '[error] required options are not defined. exiting\n'
    exit 1
  fi
}

show_options

# check if programs are installed
check_commands () {
  #if command -v ia &> '/dev/null'; then
    #declare -g ia_exists='yep'; fi
  #if command -v ytarchive &> '/dev/null'; then
    #declare -g ytarchive_exists='yep'; fi
  #if command -v youtube-dl &> '/dev/null'; then
    #declare -g ytdl_exists='yep'; fi
  if command -v yt-dlp &> '/dev/null'; then
    declare -g ytdlp_exists='yep'; fi
  #if command -v you-get &> '/dev/null'; then
    #declare -g youget_exists='yep'; fi
  if command -v ffmpeg &> '/dev/null'; then
    declare -g ffmpeg_exists='yep'; fi
  if command -v ffprobe &> '/dev/null'; then
    declare -g ffprobe_exists='yep'; fi
}

dl_dir="$HOME/.sharkive/dl"

# archive from youtube
if [[ "$method" == 'youtube' ]]; then
  check_commands
  if [[ "$ytdlp_exists" != 'yep' ]]; then
    printf '[error] yt-dlp is not installed\n'
    to_exit='yep'
  fi
  if [[ "$ffmpeg_exists" != 'yep' ]]; then
    printf '[error] ffmpeg is not installed\n'
    to_exit='yep'
  fi
  if [[ "$to_exit" == 'yep' ]]; then
    printf '[error] required applications are not installed. exiting\n'
    exit 1
  fi

  # download raw data
  printf '[info] downloading %s\n' "$source"
  until yt-dlp \
      --abort-on-unavailable-fragment \
      --allow-unplayable-formats \
      --concurrent-fragments 1 \
      --dump-json \
      --dump-pages \
      --dump-single-json \
      --extractor-args \
       'youtube:player_client=all;include_incomplete_formats' \
      --format all \
      --geo-bypass \
      --get-comments \
      --ignore-config \
      --ignore-no-formats-error \
      --keep-fragments \
      --keep-video \
      --list-formats \
      --list-subs \
      --max-sleep-interval 0 \
      --newline \
      --no-audio-multistreams \
      --no-call-home \
      --no-check-formats \
      --no-clean-info-json \
      --no-config-locations \
      --no-continue \
      --no-cookies \
      --no-cookies-from-browser \
      --no-embed-chapters \
      --no-embed-info-json \
      --no-embed-metadata \
      --no-embed-subs \
      --no-embed-thumbnail \
      --no-exec \
      --no-force-keyframes-at-cuts \
      --no-format-sort-force \
      --no-include-ads \
      --no-mark-watched \
      --no-overwrites \
      --no-playlist-reverse \
      --no-post-overwrites \
      --no-prefer-avconv \
      --no-prefer-free-formats \
      --no-remove-chapters \
      --no-restrict-filenames \
      --no-simulate \
      --no-split-chapters \
      --no-sponsorblock \
      --no-sponskrub \
      --no-sponskrub-cut \
      --no-sponskrub-force \
      --no-video-multistreams \
      --no-windows-filenames \
      --output \
       "$dl_dir/youtube/%(id)s/yt-dlp/youtube-%(id)s.%(format_id)s.%(ext)s" \
      --prefer-ffmpeg \
      --print description \
      --print duration_string \
      --print filename \
      --print format \
      --print id \
      --print thumbnail \
      --print title \
      --print urls \
      --print-traffic \
      --progress \
      --sleep-interval 0 \
      --sleep-requests 0 \
      --sleep-subtitles 0 \
      --sponsorblock-mark '-all' \
      --sponsorblock-remove '-all' \
      --sub-format ass,json3,lrc,vtt,srt,srv1,srv2,srv3,ttml,best \
      --sub-langs all \
      --use-extractors youtube \
      --verbose \
      --write-all-thumbnails \
      --write-annotations \
      --write-auto-subs \
      --write-description \
      --write-desktop-link \
      --write-info-json \
      --write-pages \
      --write-subs \
      --write-thumbnail \
      --write-url-link \
      --write-webloc-link \
      --youtube-include-dash-manifest \
      --youtube-include-hls-manifest \
      --youtube-print-sig-code \
      -- "$source"
      # for next yt-dlp release:
      #   replace --geo-bypass with --xff default
  do printf '[info] ran into an error. going again\n'; done

  printf '\ndownload successful\n'
fi
